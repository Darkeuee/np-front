@Library('your-shared-library@version') _

// Define some custom stages to override or extend the YAML config
def customStages = [
    CustomStage: [
        customStep1: [
            command: "echo 'This is a custom step'"
        ],
        customStep2: [
            groovyScript: '''
                def result = "Custom result"
                echo "This is a custom Groovy script: ${result}"
            '''
        ]
    ]
]

// Pipeline with default configuration
stage('Default Pipeline') {
    advancedPipeline([:])
}

// Pipeline with debug mode enabled
stage('Debug Pipeline') {
    advancedPipeline([
        DEBUG_MODE: true
    ])
}

// Pipeline with custom stages
stage('Custom Stages Pipeline') {
    advancedPipeline([
        stages: customStages
    ])
}

// Pipeline with both YAML and custom stages
stage('Combined Stages Pipeline') {
    advancedPipeline([
        stages: customStages,
        appendStages: true  // This flag would need to be implemented in PipelineConfig
    ])
}

// Pipeline with a step configured to fail
stage('Failing Pipeline') {
    try {
        advancedPipeline([
            stages: [
                FailingStage: [
                    failingStep: [
                        command: "echo 'This step will fail'",
                        failPipeline: true,
                        groovyScript: '''
                            throw new Exception("Simulated failure")
                        '''
                    ]
                ]
            ]
        ])
    } catch (Exception e) {
        echo "Caught expected exception: ${e.message}"
    }
}