@Library('shared-library') _

def customStages = [
    CustomStage: [
        customStep1: [
            command: "echo 'This is a custom step'"
        ],
        customStep2: [
            groovyScript: '''
                def result = "Custom result"
                echo "This is a custom Groovy script: ${result}"
            '''
        ]
    ]
]

pipeline {
    agent any

    stages {
        stage('Default Pipeline') {
            steps {
                script {
                    try {
                        advancedPipeline([:])
                    } catch (Exception e) {
                        echo "Default Pipeline failed: ${e.message}"
                    }
                }
            }
        }

        stage('Debug Pipeline') {
            steps {
                script {
                    try {
                        advancedPipeline([DEBUG_MODE: true])
                    } catch (Exception e) {
                        echo "Debug Pipeline failed: ${e.message}"
                    }
                }
            }
        }

        stage('Custom Stages Pipeline') {
            steps {
                script {
                    try {
                        advancedPipeline([stages: customStages])
                    } catch (Exception e) {
                        echo "Custom Stages Pipeline failed: ${e.message}"
                    }
                }
            }
        }

        stage('Combined Stages Pipeline') {
            steps {
                script {
                    try {
                        advancedPipeline([
                            stages: customStages,
                            appendStages: true
                        ])
                    } catch (Exception e) {
                        echo "Combined Stages Pipeline failed: ${e.message}"
                    }
                }
            }
        }

        stage('Failing Pipeline') {
            steps {
                script {
                    try {
                        advancedPipeline([
                            stages: [
                                FailingStage: [
                                    failingStep: [
                                        command: "echo 'This step will fail'",
                                        failPipeline: true,
                                        groovyScript: '''
                                            throw new Exception("Simulated failure")
                                        '''
                                    ]
                                ]
                            ]
                        ])
                    } catch (Exception e) {
                        echo "Caught expected exception in Failing Pipeline: ${e.message}"
                    }
                }
            }
        }
    }
}